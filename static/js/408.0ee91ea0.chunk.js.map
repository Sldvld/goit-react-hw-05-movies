{"version":3,"file":"static/js/408.0ee91ea0.chunk.js","mappings":"+SAEMA,EAAU,mCACVC,EAAW,+BAEJC,EAAgB,mCAAG,sGACPC,EAAAA,EAAAA,IAAA,UAClBF,EADkB,uCACqBD,IAFd,uBACtBI,EADsB,EACtBA,KADsB,kBAIvBA,EAAKC,SAJkB,2CAAH,qDAMhBC,EAAW,mCAAG,WAAMC,GAAN,yFACFJ,EAAAA,EAAAA,IAAA,UAClBF,EADkB,iCACeD,EADf,4DAC0EO,IAFxE,uBACjBH,EADiB,EACjBA,KADiB,kBAIlBA,EAAKC,SAJa,2CAAH,sDAMXG,EAAS,mCAAG,WAAMC,GAAN,yFACAN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAQ,EADA,oBACcT,EADd,+CADA,uBACfI,EADe,EACfA,KADe,kBAIhBA,GAJgB,2CAAH,sDAMTM,EAAU,mCAAG,WAAMD,GAAN,yFACDN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAQ,EADA,4BACsBT,EADtB,+CADC,uBAChBI,EADgB,EAChBA,KADgB,kBAIjBA,EAAKO,MAJY,2CAAH,sDAMVC,EAAY,mCAAG,WAAMH,GAAN,yFACHN,EAAAA,EAAAA,IAAA,UAClBF,EADkB,kBACAQ,EADA,4BACsBT,EADtB,2BADG,uBAClBI,EADkB,EAClBA,KADkB,kBAInBA,EAAKC,SAJc,2CAAH,qD,2GC5BV,SAASQ,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAC1BC,EACND,EADMC,YAAaC,EACnBF,EADmBE,MAAOC,EAC1BH,EAD0BG,aAAcC,EACxCJ,EADwCI,aAAcC,EACtDL,EADsDK,SAAUC,EAChEN,EADgEM,OAE5DC,EAAS,mCAAmCC,OAAOP,GACnDQ,EAAcN,EAAaO,MAAM,EAAG,GACpCC,EAAaL,EAAOM,KAAI,SAAAC,GAAK,OAAIA,EAAMpB,IAAV,IAAgBqB,KAAK,MAClDC,EAAcX,EAAaY,QAAQ,GACzC,OACE,iCACE,0BACE,gBAAKC,IAAKV,EAAQW,IAAKhB,EAAOiB,MAAM,WAEtC,4BACE,0BACGjB,EADH,KACYO,EADZ,QAGA,wCAAgBM,MAChB,sCACA,uBAAIV,KACJ,oCACA,yBAAIM,EAAJ,YAIP,C,qBCnBc,SAASS,IAAgB,IAAD,IACrC,GAAwCC,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAMhD,OAJAC,EAAAA,EAAAA,YAAU,YACRtC,EAAAA,EAAAA,IAAU8B,GAASS,KAAKV,EACzB,GAAE,CAACC,IAECF,GAKH,iCACE,SAAC,KAAD,CAAMY,GAAIN,EAASO,QAAnB,UACE,kDAGF,SAACpC,EAAD,CAAWC,MAAOsB,KAClB,2BACE,yBACE,SAAC,KAAD,CAAMY,GAAG,OAAT,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAG,UAAT,2BAGJ,SAAC,KAAD,OAlBK,IAqBV,C","sources":["API/API.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'b020810aa3cd987a958ad25364f86170';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendsByDay = async () => {\n  const { data } = await axios.get(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  return data.results;\n};\nexport const fetchByName = async name => {\n  const { data } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${name}`\n  );\n  return data.results;\n};\nexport const fetchById = async id => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n  );\n  return data;\n};\nexport const fetchCasts = async id => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US&page=1&include_adult=false`\n  );\n  return data.cast;\n};\nexport const fetchReviews = async id => {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return data.results;\n};\n","import PropTypes from 'prop-types';\nexport default function MovieCard({ movie }) {\n  const { poster_path, title, release_date, vote_average, overview, genres } =\n    movie;\n  const imgURL = `https://image.tmdb.org/t/p/w500/`.concat(poster_path);\n  const realiseDate = release_date.slice(0, 4);\n  const genresList = genres.map(ganre => ganre.name).join(', ');\n  const voteAvarage = vote_average.toFixed(1);\n  return (\n    <>\n      <div>\n        <img src={imgURL} alt={title} width=\"350\" />\n      </div>\n      <div>\n        <h2>\n          {title} ({realiseDate})\n        </h2>\n        <p>User score: {voteAvarage}</p>\n        <h3>Overview</h3>\n        <p>{overview}</p>\n        <h3>Genres</h3>\n        <p>{genresList} </p>\n      </div>\n    </>\n  );\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    poster_path: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n    overview: PropTypes.string.isRequired,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n      })\n    ).isRequired,\n  }).isRequired,\n};\n","import { Outlet, useLocation, useParams } from 'react-router-dom';\nimport { useEffect, useState, useRef } from 'react';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport { fetchById } from '../../API/API';\nimport { Link } from 'react-router-dom';\n\nexport default function MovieDetails() {\n  const [movieDetails, setMovieDetails] = useState(null);\n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLink = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    fetchById(movieId).then(setMovieDetails);\n  }, [movieId]);\n\n  if (!movieDetails) {\n    return null;\n  }\n\n  return (\n    <>\n      <Link to={backLink.current}>\n        <button>‚Üê Go back</button>\n      </Link>\n\n      <MovieCard movie={movieDetails} />\n      <ul>\n        <li>\n          <Link to=\"cast\">Cast</Link>\n        </li>\n        <li>\n          <Link to=\"reviews\">Reviews</Link>\n        </li>\n      </ul>\n      <Outlet />\n    </>\n  );\n}\n"],"names":["API_KEY","BASE_URL","fetchTrendsByDay","axios","data","results","fetchByName","name","fetchById","id","fetchCasts","cast","fetchReviews","MovieCard","movie","poster_path","title","release_date","vote_average","overview","genres","imgURL","concat","realiseDate","slice","genresList","map","ganre","join","voteAvarage","toFixed","src","alt","width","MovieDetails","useState","movieDetails","setMovieDetails","movieId","useParams","location","useLocation","backLink","useRef","state","from","useEffect","then","to","current"],"sourceRoot":""}